configfile: "config/config.yaml"

import pandas as pd

SAMPLES = pd.read_table(config['samples']).set_index("sample", drop = False)

rule all:
	input:
		# BAM files aligned with STAR
		expand("{outdir}/{analysis}/star/{sample}/{sample}.{ext}",
			outdir = config["outdir"], analysis = config["analysis"], 
			sample = SAMPLES.index.tolist(), ext = ["bam", "bam.bai"]),
		# raw counts from STAR output
		expand("{outdir}/{analysis}/star/{sample}/ReadsPerGene.out.tab", 
			outdir = config["outdir"], analysis = config["analysis"],
			sample = SAMPLES.index.tolist()),
		# counts table
		expand("{outdir}/{analysis}/star/raw_counts.tsv", 
			outdir = config["outdir"], analysis = config["analysis"]),
		# HTML report aggregating FASTQC results
#		expand("{outdir}/{analysis}/multiqc/multiqc.{analysis}.html", 
#			outdir = config["outdir"], analysis = config["analysis"]),
		expand("{outdir}/{analysis}/rsem/genes.{analysis}.results",
			outdir = config["outdir"], analysis = config["analysis"]),
		expand("{outdir}/{analysis}/rsem/isoforms.{analysis}.results",
			outdir = config["outdir"], analysis = config["analysis"]),

#rule fastqc_fq1:
#	input:
#		lambda wildcards: SAMPLES.loc[wildcards.sample]['fq1']
#	output:
#		html="{outdir}/{analysis}/fastqc/{sample}_1.html",
#		zip="{outdir}/{analysis}/fastqc/{sample}_1_fastqc.zip"
#	params:
#		extra="--quiet"
#	log:
#		"{outdir}/{analysis}/logs/fastqc/{sample}_1.log"
#	threads: 1
#	resources:
#		mem_mb = 1024
#	wrapper:
#		"v3.10.2/bio/fastqc"

#rule fastqc_fq2:
#	input:
#		lambda wildcards: SAMPLES.loc[wildcards.sample]['fq2']
#	output:
#		html="{outdir}/{analysis}/fastqc/{sample}_2.html",
#		zip="{outdir}/{analysis}/fastqc/{sample}_2_fastqc.zip"
#	params:
#		extra="--quiet"
#	log:
#		"{outdir}/{analysis}/logs/fastqc/{sample}_2.log"
#	threads: 1
#	resources:
#		mem_mb = 1024
#	wrapper:
#		"v3.10.2/bio/fastqc"

#rule trimmomatic_pe:
#	input:
#		r1 = lambda wildcards: SAMPLES.loc[wildcards.sample]['fq1'],
#		r2 = lambda wildcards: SAMPLES.loc[wildcards.sample]['fq2']
#	output:
#		r1 = "{outdir}/{analysis}/trimmomatic/{sample}.1.fastq.gz",
#		r2 = "{outdir}/{analysis}/trimmomatic/{sample}.2.fastq.gz",
#		# reads where trimming entirely removed the mate
#		r1_unpaired = "{outdir}/{analysis}/trimmomatic/{sample}.1.unpaired.fastq.gz",
#		r2_unpaired = "{outdir}/{analysis}/trimmomatic/{sample}.2.unpaired.fastq.gz"
#	log:
#		"{outdir}/{analysis}/logs/trimmomatic/{sample}.log"
#	params:
#		# list of trimmers (see manual)
#		trimmer=config["params"]["trimmomatic_trimmer"],
#		# optional parameters
#		extra="",
#		compression_level="-9"
#	threads:
#		32
#	resources:
#		mem_mb=1024
#	wrapper:
#		"v3.10.2/bio/trimmomatic/pe"

#rule fastqc_trimmed_fq1:
#	input:
#		"{outdir}/{analysis}/trimmomatic/{sample}.1.fastq.gz",
#	output:
#		html="{outdir}/{analysis}/fastqc/{sample}_1_trimmed.html",
#		zip="{outdir}/{analysis}/fastqc/{sample}_1_trimmed_fastqc.zip"
#	params:
#		extra="--quiet"
#	log:
#		"{outdir}/{analysis}/logs/fastqc/{sample}_1_trimmed.log"
#	threads: 1
#	resources:
#		mem_mb = 1024
#	wrapper:
#		"v3.10.2/bio/fastqc"

#rule fastqc_trimmed_fq2:
#	input:
#		"{outdir}/{analysis}/trimmomatic/{sample}.2.fastq.gz",
#	output:
#		html="{outdir}/{analysis}/fastqc/{sample}_2_trimmed.html",
#		zip="{outdir}/{analysis}/fastqc/{sample}_2_trimmed_fastqc.zip"
#	params:
#		extra="--quiet"
#	log:
#		"{outdir}/{analysis}/logs/fastqc/{sample}_2_trimmed.log"
#	threads: 1
#	resources:
#		mem_mb = 1024
#	wrapper:
#		"v3.10.2/bio/fastqc"

#rule multiqc_dir:
#	input:
#		expand("{outdir}/{analysis}/fastqc/{sample}_{unit}.html", 
#			outdir = config["outdir"], analysis = config["analysis"], 
#			sample = SAMPLES.index.tolist(), unit = [1,2]),
#		expand("{outdir}/{analysis}/fastqc/{sample}_{unit}_trimmed.html",
#			outdir = config["outdir"], analysis = config["analysis"], 
#			sample = SAMPLES.index.tolist(), unit = [1,2]),
#		expand("{outdir}/{analysis}/logs/star/{sample}/Log.final.out", 
#			outdir = config["outdir"], analysis = config["analysis"],
#			sample = SAMPLES.index.tolist()),
#	output:
#		"{outdir}/{analysis}/multiqc/multiqc.{analysis}.html",
#		directory("{outdir}/{analysis}/multiqc/multiqc_data"),
#	params:
#		# Optional: extra parameters for multiqc.
#		extra="--data-dir",
#	log:
#		"{outdir}/{analysis}/logs/multiqc.log",
#	wrapper:
#		"v3.3.6/bio/multiqc"

rule star_pe_multi:
	input:
		fq1 = lambda wildcards: SAMPLES.loc[wildcards.sample]['fq1'],
		fq2 = lambda wildcards: SAMPLES.loc[wildcards.sample]['fq2'],
		idx=config['STAR_index']
	output:
		transcriptome_sam="{outdir}/{analysis}/star/{sample}/Aligned.toTranscriptome.out.bam",
		aln="{outdir}/{analysis}/star/{sample}/{sample}.bam",
		reads_per_gene="{outdir}/{analysis}/star/{sample}/ReadsPerGene.out.tab",
		# see STAR manual for additional output files
		log="{outdir}/{analysis}/logs/star/{sample}/Log.out",
		log_final="{outdir}/{analysis}/logs/star/{sample}/Log.final.out",
		sj="{outdir}/{analysis}/star/{sample}/SJ.out.tab",
		unmapped=["{outdir}/{analysis}/star/{sample}/unmapped.1.fastq.gz", "{outdir}/{analysis}/star/{sample}/unmapped.2.fastq.gz"],
	log:
		"{outdir}/{analysis}/logs/star/{sample}.log",
	params:
		# optional parameters
		extra= "--outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --sjdbGTFfile {}".format(config["gtf"])
	threads: 8
	resources:
		tmpdir="{}/{}/tmp".format(config["outdir"], config["analysis"])
	wrapper:
		"https://github.com/tju-compbio/snakemake-wrappers/raw/master/bio/star/align"

rule samtools_index:
	input:
		"{outdir}/{analysis}/star/{sample}/{sample}.bam",
	output:
		"{outdir}/{analysis}/star/{sample}/{sample}.bam.bai",
	log:
		"{outdir}/{analysis}/logs/samtools_index/{sample}.log",
	params:
		extra="",
	threads: 4
	wrapper:
		"v3.10.2/bio/samtools/index"

rule rownames_counts:
	input:
		expand("{outdir}/{analysis}/star/{sample}/ReadsPerGene.out.tab", outdir = config["outdir"], analysis = config["analysis"], sample = SAMPLES.index.tolist()[1]),
	output:
		temp("{outdir}/{analysis}/star/rownames_counts.tsv")
	shell:
		'''echo -e "" > {output} ; tail -n +5 {input} | cut -f1 >> {output}'''

#Note: decide on whether extracting column 2 (unstranded) OR columns 3/or4 (stranded) from ReadsPerGene.out.tab file. 
#You need to manually mention in the shell command whether you want to grab column 2 or column 3 or column 4 based on your input data
rule sample_counts:
	input:
		"{outdir}/{analysis}/star/{sample}/ReadsPerGene.out.tab"
	output:
		temp("{outdir}/{analysis}/star/{sample}_counts.tsv")
	shell:
		'''echo {wildcards.sample} > {output} ; tail -n +5 {input} | cut -f4 >> {output}'''

rule gather_counts:
	input:
		rownames = "{outdir}/{analysis}/star/rownames_counts.tsv",
		all_samples = expand("{outdir}/{analysis}/star/{sample}_counts.tsv", outdir = config["outdir"], analysis = config["analysis"], sample = SAMPLES.index.tolist())
	output:
		"{outdir}/{analysis}/star/raw_counts.tsv"
	shell:
		"paste {input.rownames} {input.all_samples} > {output}"

rule rsem_calculate_expression:
	input:
		bam="{outdir}/{analysis}/star/{sample}/Aligned.toTranscriptome.out.bam",
		reference = expand("{RSEM_index}/{genome}{ext}",
			RSEM_index = config["RSEM_index"], genome = config["genome"],
			ext = [".grp", ".ti", ".transcripts.fa", ".seq", ".idx.fa", ".n2g.idx.fa", ".chrlist"]),
	output:
		genes_results = "{outdir}/{analysis}/rsem/{sample}.genes.results",
		isoforms_results = "{outdir}/{analysis}/rsem/{sample}.isoforms.results"
	params:
		paired_end = True,
		extra = "--strandedness {}".format(config["strandedness"])
	log:
		"{outdir}/{analysis}/logs/rsem/{sample}.calculate_expression.log"
	threads: 2
	wrapper:
		"v3.10.2/bio/rsem/calculate-expression"

rule rsem_generate_data_matrix_genes:
	input:
		expand("{outdir}/{analysis}/rsem/{sample}.genes.results",
			outdir = config["outdir"], analysis = config["analysis"], 
			sample = SAMPLES.index.tolist())
	output:
		"{outdir}/{analysis}/rsem/genes.{analysis}.results"
	params:
		extra = "",
	log:
		"{outdir}/{analysis}/logs/rsem/generate_data_matrix_genes.log"
	wrapper:
		"v3.10.2/bio/rsem/generate-data-matrix"

rule rsem_generate_data_matrix_isoforms:
	input:
		expand("{outdir}/{analysis}/rsem/{sample}.isoforms.results",
			outdir = config["outdir"], analysis = config["analysis"], 
			sample = SAMPLES.index.tolist())
	output:
		"{outdir}/{analysis}/rsem/isoforms.{analysis}.results"
	params:
		extra = "",
	log:
		"{outdir}/{analysis}/logs/rsem/generate_data_matrix_isoforms.log"
	wrapper:
		"v3.10.2/bio/rsem/generate-data-matrix"
